// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/platform-server/api/v1/trainJob.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on TrainJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrainJobRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 30 {
		return TrainJobRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDesc()) > 300 {
		return TrainJobRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 300 runes",
		}
	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainJobRequestValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainJobRequestValidationError{
				field:  "Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDatasets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainJobRequestValidationError{
					field:  fmt.Sprintf("Datasets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainJobRequestValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TrainJobRequestValidationError is the validation error returned by
// TrainJobRequest.Validate if the designated constraints aren't met.
type TrainJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobRequestValidationError) ErrorName() string { return "TrainJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e TrainJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobRequestValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Image) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 300 {
		return ImageValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 300 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetVersion()); l < 1 || l > 30 {
		return ImageValidationError{
			field:  "Version",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
	}

	return nil
}

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on Dataset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Dataset) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetStorageConfigName()) > 30 {
		return DatasetValidationError{
			field:  "StorageConfigName",
			reason: "value length must be at most 30 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddr()) > 300 {
		return DatasetValidationError{
			field:  "Addr",
			reason: "value length must be at most 300 runes",
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 300 {
		return DatasetValidationError{
			field:  "Name",
			reason: "value length must be at most 300 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPath()) > 300 {
		return DatasetValidationError{
			field:  "Path",
			reason: "value length must be at most 300 runes",
		}
	}

	return nil
}

// DatasetValidationError is the validation error returned by Dataset.Validate
// if the designated constraints aren't met.
type DatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatasetValidationError) ErrorName() string { return "DatasetValidationError" }

// Error satisfies the builtin error interface
func (e DatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatasetValidationError{}

// Validate checks the field values on Output with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Output) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetStorageConfigName()) > 30 {
		return OutputValidationError{
			field:  "StorageConfigName",
			reason: "value length must be at most 30 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddr()) > 300 {
		return OutputValidationError{
			field:  "Addr",
			reason: "value length must be at most 300 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPath()) > 300 {
		return OutputValidationError{
			field:  "Path",
			reason: "value length must be at most 300 runes",
		}
	}

	return nil
}

// OutputValidationError is the validation error returned by Output.Validate if
// the designated constraints aren't met.
type OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutputValidationError) ErrorName() string { return "OutputValidationError" }

// Error satisfies the builtin error interface
func (e OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutputValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Task) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 30 {
		return TaskValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetCommand()); l < 0 || l > 300 {
		return TaskValidationError{
			field:  "Command",
			reason: "value length must be between 0 and 300 runes, inclusive",
		}
	}

	for idx, item := range m.GetParameters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  fmt.Sprintf("Parameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetTaskNumber() < 1 {
		return TaskValidationError{
			field:  "TaskNumber",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetMinFailedTaskCount() < 1 {
		return TaskValidationError{
			field:  "MinFailedTaskCount",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetMinSucceededTaskCount() < 1 {
		return TaskValidationError{
			field:  "MinSucceededTaskCount",
			reason: "value must be greater than or equal to 1",
		}
	}

	// no validation rules for IsMainRole

	return nil
}

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on Parameter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Parameter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// ParameterValidationError is the validation error returned by
// Parameter.Validate if the designated constraints aren't met.
type ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParameterValidationError) ErrorName() string { return "ParameterValidationError" }

// Error satisfies the builtin error interface
func (e ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParameterValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Size

	return nil
}

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on TrainJobReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TrainJobReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	return nil
}

// TrainJobReplyValidationError is the validation error returned by
// TrainJobReply.Validate if the designated constraints aren't met.
type TrainJobReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobReplyValidationError) ErrorName() string { return "TrainJobReplyValidationError" }

// Error satisfies the builtin error interface
func (e TrainJobReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobReplyValidationError{}

// Validate checks the field values on StopJobRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StopJobRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return StopJobRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// StopJobRequestValidationError is the validation error returned by
// StopJobRequest.Validate if the designated constraints aren't met.
type StopJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopJobRequestValidationError) ErrorName() string { return "StopJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e StopJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopJobRequestValidationError{}

// Validate checks the field values on StopJobReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StopJobReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StoppedAt

	return nil
}

// StopJobReplyValidationError is the validation error returned by
// StopJobReply.Validate if the designated constraints aren't met.
type StopJobReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopJobReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopJobReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopJobReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopJobReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopJobReplyValidationError) ErrorName() string { return "StopJobReplyValidationError" }

// Error satisfies the builtin error interface
func (e StopJobReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopJobReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopJobReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopJobReplyValidationError{}

// Validate checks the field values on TrainJobListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainJobListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPageIndex() < 1 {
		return TrainJobListRequestValidationError{
			field:  "PageIndex",
			reason: "value must be greater than or equal to 1",
		}
	}

	if val := m.GetPageSize(); val < 1 || val >= 100 {
		return TrainJobListRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100)",
		}
	}

	// no validation rules for SortBy

	if _, ok := _TrainJobListRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
		return TrainJobListRequestValidationError{
			field:  "OrderBy",
			reason: "value must be in list [ asc desc]",
		}
	}

	// no validation rules for CreatedAtGte

	// no validation rules for CreatedAtLt

	// no validation rules for Status

	// no validation rules for SearchKey

	return nil
}

// TrainJobListRequestValidationError is the validation error returned by
// TrainJobListRequest.Validate if the designated constraints aren't met.
type TrainJobListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobListRequestValidationError) ErrorName() string {
	return "TrainJobListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobListRequestValidationError{}

var _TrainJobListRequest_OrderBy_InLookup = map[string]struct{}{
	"":     {},
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on TrainJobListReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrainJobListReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalSize

	for idx, item := range m.GetTrainJobs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainJobListReplyValidationError{
					field:  fmt.Sprintf("TrainJobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TrainJobListReplyValidationError is the validation error returned by
// TrainJobListReply.Validate if the designated constraints aren't met.
type TrainJobListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobListReplyValidationError) ErrorName() string {
	return "TrainJobListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobListReplyValidationError{}

// Validate checks the field values on TrainJob with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TrainJob) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	for idx, item := range m.GetDatasets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainJobValidationError{
					field:  fmt.Sprintf("Datasets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainJobValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TrainJobValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Status

	// no validation rules for CompletedAt

	// no validation rules for RunSec

	// no validation rules for StartedAt

	return nil
}

// TrainJobValidationError is the validation error returned by
// TrainJob.Validate if the designated constraints aren't met.
type TrainJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobValidationError) ErrorName() string { return "TrainJobValidationError" }

// Error satisfies the builtin error interface
func (e TrainJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobValidationError{}

// Validate checks the field values on TrainJobInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainJobInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return TrainJobInfoRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// TrainJobInfoRequestValidationError is the validation error returned by
// TrainJobInfoRequest.Validate if the designated constraints aren't met.
type TrainJobInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobInfoRequestValidationError) ErrorName() string {
	return "TrainJobInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobInfoRequestValidationError{}

// Validate checks the field values on TrainJobInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TrainJobInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTrainJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainJobInfoReplyValidationError{
				field:  "TrainJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TrainJobInfoReplyValidationError is the validation error returned by
// TrainJobInfoReply.Validate if the designated constraints aren't met.
type TrainJobInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobInfoReplyValidationError) ErrorName() string {
	return "TrainJobInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobInfoReplyValidationError{}

// Validate checks the field values on TrainJobStasticsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainJobStasticsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CreatedAtGte

	// no validation rules for CreatedAtLt

	return nil
}

// TrainJobStasticsRequestValidationError is the validation error returned by
// TrainJobStasticsRequest.Validate if the designated constraints aren't met.
type TrainJobStasticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobStasticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobStasticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobStasticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobStasticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobStasticsRequestValidationError) ErrorName() string {
	return "TrainJobStasticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobStasticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobStasticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobStasticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobStasticsRequestValidationError{}

// Validate checks the field values on TrainJobStasticsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TrainJobStasticsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalSize

	// no validation rules for SucceededSize

	// no validation rules for FailedSize

	// no validation rules for StoppedSize

	// no validation rules for RunningSize

	// no validation rules for WaitingSize

	return nil
}

// TrainJobStasticsReplyValidationError is the validation error returned by
// TrainJobStasticsReply.Validate if the designated constraints aren't met.
type TrainJobStasticsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainJobStasticsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainJobStasticsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainJobStasticsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainJobStasticsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainJobStasticsReplyValidationError) ErrorName() string {
	return "TrainJobStasticsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e TrainJobStasticsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainJobStasticsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainJobStasticsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainJobStasticsReplyValidationError{}

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Node) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NodeName

	// no validation rules for Ip

	// no validation rules for Status

	// no validation rules for Capacity

	// no validation rules for Allocated

	return nil
}

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on PlatformResourcesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PlatformResourcesReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlatformResourcesReplyValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PlatformResourcesReplyValidationError is the validation error returned by
// PlatformResourcesReply.Validate if the designated constraints aren't met.
type PlatformResourcesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformResourcesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformResourcesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformResourcesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformResourcesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformResourcesReplyValidationError) ErrorName() string {
	return "PlatformResourcesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PlatformResourcesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformResourcesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformResourcesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformResourcesReplyValidationError{}

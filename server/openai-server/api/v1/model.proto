syntax = "proto3";

package openaiserver.api.v1;

option go_package = "server/openai-server/api/v1;v1";



import "google/api/annotations.proto";
import "validate/validate.proto";

service Model {
    // 查询预置模型列表
    rpc ListPreModel (ListPreModelRequest) returns (ListPreModelReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/premodel"
      };
    };
    // 查询我的模型列表
    rpc ListMyModel (ListMyModelRequest) returns (ListMyModelReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/mymodel"
      };
    };
    // 查询公共模型列表
    rpc ListCommModel (ListCommModelRequest) returns (ListCommModelReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/commmodel"
      };
    };
    // 查询模型版本列表
    rpc ListModelVersion (ListModelVersionRequest) returns (ListModelVersionReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/model/{modelId}"
      };
    };
    // 查询公共模型版本列表
    rpc ListCommModelVersion (ListCommModelVersionRequest) returns (ListCommModelVersionReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/commmodel/{modelId}"
      };
    };
    // 分享模型版本到公共模型
	  rpc ShareModelVersion(ShareModelVersionRequest) returns (ShareModelVersionReply) {
        option (google.api.http) = {
            post: "/v1/modelmanage/model/{modelId}/version/{version}/share"
            body: "*"
      };
    };
    // 取消分享模型版本到公共模型
	  rpc CloseShareModelVersion(CloseShareModelVersionRequest) returns (CloseShareModelVersionReply) {
        option (google.api.http) = {
            post: "/v1/modelmanage/model/{modelId}/version/{version}/closeshare"
            body: "*"
      };
    };
    // 删除我的模型版本
    rpc DeleteMyModelVersion (DeleteMyModelVersionRequest) returns (DeleteMyModelVersionReply) {
        option (google.api.http) = {
            delete: "/v1/modelmanage/mymodel/{modelId}/version/{version}"
      };
    };
    // 删除我的模型
    rpc DeleteMyModel (DeleteMyModelRequest) returns (DeleteMyModelReply) {
        option (google.api.http) = {
            delete: "/v1/modelmanage/mymodel/{modelId}"
      };
    };
    // 下载模型版本
    rpc DownloadModelVersion (DownloadModelVersionRequest) returns (DownloadModelVersionReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/model/{modelId}/version/{version}/download"
      };
    };
    // 预览模型版本
    rpc ListModelVersionFile (ListModelVersionFileRequest) returns (ListModelVersionFileReply) {
        option (google.api.http) = {
            get: "/v1/modelmanage/model/{modelId}/version/{version}/file"
      };
    };
}

message ModelDetail {
  // 模型id
  string modelId = 1;
  // 空间名称
  string spaceName = 2;
  // 空间id
  string spaceId = 3;
  // 用户名称
  string userName = 4;
  // 算法名称
  string algorithmName = 5;
  // 算法版本
  string algorithmVersion = 6;
  // 模型名称
  string modelName = 7;
  // 模型描述
  string modelDescript = 8;
  // 模型最新版本
  string latestVersion = 9;
  // 模型创建时间(时间戳)
  int64 createdAt = 10;
  // 模型框架id
  string frameWorkId = 11;
  // 模型框架名称
  string frameWorkName = 12;
}

message VersionDetail {
  // 模型id
  string modelId = 1;
  // 模型版本
  string version = 2;
  // 模型版本描述
  string descript = 3;
  // 模型版本文件状态,0:初始态,1:文件上传中,2:文件已上传,3:文件上传失败
  int32 fileStatus = 4;
  // 模型版本创建时间(时间戳)
  int64 createdAt = 5;
}

message MyVersionDetail {
  // 是否已分享，0：未分享，1：已分享
  bool isShared = 1;
  // 模型版本详情
  VersionDetail versionDetail = 2;
}

message ListPreModelRequest {
  // 页码，从1开始
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  // 模糊搜索字段，最大512个字符，非必填
  string searchKey = 3[(validate.rules).string = {max_len:512}];
  int64 createdAtGte = 4;
  int64 createdAtLt = 5;
  string frameWorkId = 6;
}
message ListPreModelReply {
  // 符合条件的总条数
  int64 totalSize = 1;
  repeated ModelDetail models = 2;
}

message ListMyModelRequest {
  // 页码，从1开始
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  // 模糊搜索字段，最大512个字符，非必填
  string searchKey = 3[(validate.rules).string = {max_len:512}];
  int64 createdAtGte = 4;
  int64 createdAtLt = 5;
  string frameWorkId = 6;
}
message ListMyModelReply {
  // 符合条件的总条数
  int64 totalSize = 1;
  // 模型详情列表
  repeated ModelDetail models = 2;
}

message ListCommModelRequest {
  // 页码，从1开始
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  // 模糊搜索字段，最大512个字符，非必填
  string searchKey = 3[(validate.rules).string = {max_len:512}];
  int64 createdAtGte = 4;
  int64 createdAtLt = 5;
  string frameWorkId = 6;
}
message ListCommModelReply {
  // 符合条件的总条数
  int64 totalSize = 1;
  // 模型详情列表
  repeated ModelDetail models = 2;
}

message ListModelVersionRequest {
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 页码，从1开始
  int64 pageIndex = 2[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 3[(validate.rules).int64 = {gte:1,lte:100}];
}
message ListModelVersionReply {
  // 符合条件的总条数
  int64 totalSize = 1;
  // 模型版本详情列表
  repeated MyVersionDetail modelVersions = 2;
}

message ListCommModelVersionRequest {
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 页码，从1开始
  int64 pageIndex = 2[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 3[(validate.rules).int64 = {gte:1,lte:100}];
  string frameWorkId = 4;
}
message ListCommModelVersionReply {
  // 符合条件的总条数
  int64 totalSize = 1;
  // 模型版本详情列表
  repeated VersionDetail modelVersions = 2;
}

message ShareModelVersionRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 模型版本
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
}
message ShareModelVersionReply {
  // 分享模型版本时间(时间戳)
  int64 sharedAt = 1;
}

message CloseShareModelVersionRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 模型版本
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
}
message CloseShareModelVersionReply {
  // 取消分享模型版本时间(时间戳)
  int64 closeSharedAt = 1;
}

message DeleteMyModelVersionRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 模型版本
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
}
message DeleteMyModelVersionReply {
  // 删除模型版本时间(时间戳)
  int64 deletedAt = 1;
}

message DeleteMyModelRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
}
message DeleteMyModelReply {
  // 删除模型时间(时间戳)
  int64 deletedAt = 1;
}

message DownloadModelVersionRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 模型版本
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  // 域名，必须http或https开头，满足url的格式
  string domain = 3[(validate.rules).string = {min_len: 1,pattern:"(https?)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]"}];
}
message DownloadModelVersionReply {
  // 模型版本下载链接
  string downloadUrl = 1; 
}

message ListModelVersionFileRequest {
  // 模型id
  string modelId = 1[(validate.rules).string = {min_len:1,max_len:32,pattern:"^[A-Za-z0-9]+$"}];
  // 模型版本
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  // 查询前缀，非必填
  string prefix = 3;
}
message ModelInfo {
  // 文件名称
	string name = 1;
  // 文件修改时间(时间戳)
	int64 lastModified = 2;
  // 文件大小，单位字节
	int64 size = 3;
  // 文件类型
	string contentType = 4;
}
message ListModelVersionFileReply {
  // 文件信息列表
  repeated ModelInfo modelInfoList = 1; 
}

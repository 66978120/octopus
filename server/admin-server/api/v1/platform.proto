syntax = "proto3";

package adminserver.api.v1;

option go_package = "server/admin-server/api/v1;v1";


import "google/api/annotations.proto";
import "validate/validate.proto";
import "server/common/api/v1/configkey.proto";

service PlatformService {
  // 查询第三方平台列表
  rpc ListPlatform (ListPlatformRequest) returns (ListPlatformReply) {
    option (google.api.http) = {
      get: "/v1/platformmanage/platform"
    };
  };
  // 创建第三方平台
  rpc CreatePlatform (CreatePlatformRequest) returns (CreatePlatformReply) {
    option (google.api.http) = {
      post: "/v1/platformmanage/platform"
      body: "*"
    };
  };
  // 更新第三方平台
  rpc UpdatePlatform (UpdatePlatformRequest) returns (UpdatePlatformReply) {
    option (google.api.http) = {
      put: "/v1/platformmanage/platform"
      body: "*"
    };
  };
  // 查询存储配置列表
  rpc ListPlatformStorageConfig (ListPlatformStorageConfigRequest) returns (ListPlatformStorageConfigReply) {
    option (google.api.http) = {
      get: "/v1/platformmanage/platform/{platformId}/storageconfig"
    };
  };
  // 创建存储配置
  rpc CreatePlatformStorageConfig (CreatePlatformStorageConfigRequest) returns (CreatePlatformStorageConfigReply) {
    option (google.api.http) = {
      post: "/v1/platformmanage/platform/{platformId}/storageconfig"
      body: "*"
    };
  };
  // 删除存储配置
  rpc DeletePlatformStorageConfig (DeletePlatformStorageConfigRequest) returns (DeletePlatformStorageConfigReply) {
    option (google.api.http) = {
      delete: "/v1/platformmanage/platform/{platformId}/storageconfig/{name}"
    };
  }
  // 查询配置key列表
  rpc ListPlatformConfigKey (ListPlatformConfigKeyRequest) returns (ListPlatformConfigKeyReply) {
    option (google.api.http) = {
      get: "/v1/platformmanage/platformconfigkey"
    };
  }

  // 查询平台配置
  rpc GetPlatformConfig (GetPlatformConfigRequest) returns (GetPlatformConfigReply) {
    option (google.api.http) = {
      get: "/v1/platformmanage/platform/{platformId}/config"
    };
  };

  // 更新平台配置
  rpc UpdatePlatformConfig (UpdatePlatformConfigRequest) returns (UpdatePlatformConfigReply) {
    option (google.api.http) = {
      put: "/v1/platformmanage/platform/{platformId}/config"
      body: "*"
    };
  };
   //获取平台任务列表
   rpc PlatformTrainJobList(PlatformTrainJobListRequest) returns (PlatformTrainJobListReply){
    option (google.api.http) = {
      get: "/v1/platformmanage/platform/trainjob"
    };
 };
}

message ListPlatformRequest {
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  string sortBy = 3;
  string orderBy = 4[(validate.rules).string = {in: ["", "asc", "desc"]}];
  int64 createdAtGte = 5;
  int64 createdAtLt = 6;
  string searchKey = 7;
}

message Platform {
  int64 createdAt = 1;
  int64 updatedAt = 2;
  string id = 3;
  string name = 4;
  string clientSecret = 5;
  string contactName = 6;
  string contactInfo = 7;
  string resourcePool = 8;
}

message ListPlatformReply {
  int64 totalSize = 1;
  repeated Platform platforms = 2;
}

message CreatePlatformRequest {
  // 名称，必填
  string name = 1[(validate.rules).string = {min_len: 1, max_len: 30}];
  // 联系人姓名，选填
  string contactName = 2;
  // 联系方式，选填
  string contactInfo = 3;
  // 资源池，必填
  string resourcePool = 4[(validate.rules).string = {min_len: 1}];
}

message CreatePlatformReply {
  string id = 1;
}

message UpdatePlatformRequest {
  string id = 1;
  string contactName = 2;
  string contactInfo = 3;
  string resourcePool = 4[(validate.rules).string = {min_len: 1}];
}

message UpdatePlatformReply {

}


message StorageOptions {
  message Juicefs {
    string name = 1;
    string metaUrl = 2;
  }

  Juicefs juicefs = 1;
}

message ListPlatformStorageConfigRequest {
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  string sortBy = 3;
  string orderBy = 4[(validate.rules).string = {in: ["", "asc", "desc"]}];
  int64 createdAtGte = 5;
  int64 createdAtLt = 6;
  string searchKey = 7;
  string platformId = 8;
  string name = 9;
}

message PlatformStorageConfig {
  int64 createdAt = 1;
  int64 updatedAt = 2;
  string platformId = 3;
  string name = 4;
  string type = 5;
  StorageOptions options = 6;
}

message ListPlatformStorageConfigReply {
  int64 totalSize = 1;
  repeated PlatformStorageConfig platformStorageConfigs = 2;
}

message CreatePlatformStorageConfigRequest {
  string platformId = 1[(validate.rules).string = {min_len: 1}];
  string name = 2[(validate.rules).string = {min_len: 1, max_len: 30, not_contains: "/"}];
  string type = 3[(validate.rules).string = {in: ["juicefs"]}];
  StorageOptions options = 4;
}

message CreatePlatformStorageConfigReply {
}


message DeletePlatformStorageConfigRequest {
  string platformId = 1;
  string name = 2;
}

message DeletePlatformStorageConfigReply {

}

message ListPlatformConfigKeyRequest {

}

message ListPlatformConfigKeyReply {
  repeated common.api.v1.ConfigKey  configKeys = 1;
}

message GetPlatformConfigRequest {
  string platformId = 1;
}

message GetPlatformConfigReply {
  map<string, string> config = 1;
}

message UpdatePlatformConfigRequest {
  string platformId = 1[(validate.rules).string = {min_len: 1}];
  map<string, string> config = 2[(validate.rules).map.min_pairs = 1];
}

message UpdatePlatformConfigReply {

}

message PlatformImage {
  string name = 1[(validate.rules).string = {min_len: 1, max_len: 300}];
  string version = 2[(validate.rules).string = {min_len: 1, max_len: 30}];
}

message PlatformDataset {
  //存储配置名称，必填
  string storageConfigName = 1[(validate.rules).string = {max_len: 30}];
  //数据集子目录
  string addr = 2[(validate.rules).string = {max_len: 300}];
  //数据集名称，必填
  string name = 3[(validate.rules).string = {max_len: 300}];
  //数据集容器内路径
  string path = 4[(validate.rules).string = {max_len: 300}];;
}

message PlatformOutput {
  //存储配置名称，必填
  string storageConfigName = 1[(validate.rules).string = {max_len: 30}];
  //存储子目录
  string addr = 2[(validate.rules).string = {max_len: 300}];
  //容器内输出路径
  string path = 3[(validate.rules).string = {max_len: 300}];
}

message PlatformTask {
  //子任务名称，非必填，校验规则"^[0-9a-zA-Z_]*$"，最大长度30个字符
  string name = 1[(validate.rules).string = {min_len: 1, max_len:30}];
  //子任务执行命令
  string command = 2[(validate.rules).string = {min_len: 0, max_len: 300}];
  //command执行命令参数,key-value，数组
  repeated PlatformParameter parameters = 3;
  //资源
  repeated PlatformResource resources = 4;
  //副本个数，非必填
  int64 taskNumber = 5[(validate.rules).int64 = {gte:1}];
  //子任务最小失败数，非必填
  int64  minFailedTaskCount = 6[(validate.rules).int64 = {gte:1}];
  //子任务最小成功数，非必填
  int64  minSucceededTaskCount = 7[(validate.rules).int64 = {gte:1}];
  //是否主任务，非必填
  bool isMainRole = 8;
}

message PlatformParameter {
  //命令参数key，非必填
  string key = 1;
  //命令参数value，非必填
  string value = 2;
}

message PlatformResource {
  //命令参数key，必填
  string name = 1;
  //命令参数value，必填
  string size = 2;
}

message PlatformTrainJobListRequest{
  // 页码，从1开始，非必填
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条，非必填
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  // 分组依据，非必填
  string sortBy = 3;
  //升序、降序，非必填
  string orderBy = 4[(validate.rules).string = {in: ["", "asc", "desc"]}];
  //大于某个时间创建，非必填
  int64 createdAtGte = 5;
  //小于某个时间创建，非必填
  int64 createdAtLt = 6;
  //状态查询，非必填
  string status = 7;
  //模糊查找字段，可用于name等模糊查找，非必填
  string searchKey = 8;
  //platformId，不传则查全部平台
  string platformId = 9;
}

message PlatformTrainJobListReply {
  //查询结果总数
  int64  totalSize = 1;
  //任务
  repeated PlatformTrainJob trainJobs = 2;
}

message PlatformTrainJob{
  //任务ID
  string  id = 1;
  //job名称
  string name = 2;
  //platformId
  string platformId = 3;
  //platformName
  string platformName = 4;
  //job描述
  string desc = 5;
  //数据集
  repeated PlatformDataset datasets = 6;
  //镜像
  PlatformImage image = 7;
  //子任务配置信息
  repeated PlatformTask tasks = 8;
  //创建时间
  int64 createdAt = 9;
  //更新时间
  int64 updatedAt = 10;
  //任务状态
  string status   = 11;
  //job完成时间
  int64  completedAt = 12;
  //运行时
  int64 runSec = 13;
  //启动时间
  int64  startedAt = 14;
}


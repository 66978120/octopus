syntax = "proto3";

package adminserver.api.v1;

option go_package = "server/admin-server/api/v1;v1";



import "google/api/annotations.proto";
import "validate/validate.proto";

service Algorithm {
    // 新增算法用途
    rpc AddAlgorithmApply (AddAlgorithmApplyRequest) returns (AddAlgorithmApplyReply) {
        option (google.api.http) = {
            post: "/v1/algorithmmanage/algorithmapply"
            body: "*"
      };
    }
    // 查询算法用途列表
    rpc ListAlgorithmApply (ListAlgorithmApplyRequest) returns (ListAlgorithmApplyReply) {
      option (google.api.http) = {
        get: "/v1/algorithmmanage/algorithmapply"
      }; 
    }

    // 删除算法用途
    rpc DeleteAlgorithmApply (DeleteAlgorithmApplyRequest) returns (DeleteAlgorithmApplyReply) {
      option (google.api.http) = {
        delete: "/v1/algorithmmanage/algorithmapply/{id}"
      };
    }

    // 修改算法用途描述
    rpc UpdateAlgorithmApply (UpdateAlgorithmApplyRequest) returns (UpdateAlgorithmApplyReply) {
      option (google.api.http) = {
        put: "/v1/algorithmmanage/algorithmapply/{id}"
      };
    }

    // 新增算法框架
    rpc AddAlgorithmFramework (AddAlgorithmFrameworkRequest) returns (AddAlgorithmFrameworkReply) {
        option (google.api.http) = {
            post: "/v1/algorithmmanage/algorithmframework"
            body: "*"
      };
    }

    // 查询算法框架列表
    rpc ListAlgorithmFramework (ListAlgorithmFrameworkRequest) returns (ListAlgorithmFrameworkReply) {
      option (google.api.http) = {
        get: "/v1/algorithmmanage/algorithmframework"
      }; 
    }

    // 删除算法框架
    rpc DeleteAlgorithmFramework (DeleteAlgorithmFrameworkRequest) returns (DeleteAlgorithmFrameworkReply) {
      option (google.api.http) = {
        delete: "/v1/algorithmmanage/algorithmframework/{id}"
      };
    }

    // 修改算法框架描述
    rpc UpdateAlgorithmFramework (UpdateAlgorithmFrameworkRequest) returns (UpdateAlgorithmFrameworkReply) {
      option (google.api.http) = {
        put: "/v1/algorithmmanage/algorithmframework/{id}"
      };
    }

    // 查询预置算法列表
    rpc ListPreAlgorithm (ListPreAlgorithmRequest) returns (ListPreAlgorithmReply) {
        option (google.api.http) = {
            get: "/v1/algorithmmanage/prealgorithm"
      };
    }

    // 查询所有用户算法列表
    rpc ListAllAlgorithm (ListAllAlgorithmRequest) returns (ListAllAlgorithmReply) {
        option (google.api.http) = {
            get: "/v1/algorithmmanage/allalgorithm"
      };
    }

    // 查询算法版本列表
    rpc ListAlgorithmVersion (ListAlgorithmVersionRequest) returns (ListAlgorithmVersionReply) {
        option (google.api.http) = {
            get: "/v1/algorithmmanage/algorithm/{algorithmId}"
      };
    }

    // 删除预置算法
    rpc DeletePreAlgorithm (DeletePreAlgorithmRequest) returns (DeletePreAlgorithmReply) {
        option (google.api.http) = {
            delete: "/v1/algorithmmanage/prealgorithm/{algorithmId}"
      };
    }

    // 删除预置算法版本
    rpc DeletePreAlgorithmVersion (DeletePreAlgorithmVersionRequest) returns (DeletePreAlgorithmVersionReply) {
        option (google.api.http) = {
            delete: "/v1/algorithmmanage/prealgorithm/{algorithmId}/version/{version}"
      };
    }

     // 压缩算法包
    rpc DownloadAlgorithmVersionCompress (DownloadAlgorithmVersionCompressRequest) returns (DownloadAlgorithmVersionCompressReply) {
        option (google.api.http) = {
            post: "/v1/algorithmmanage/algorithm/{algorithmId}/version/{version}/downloadcompress"
            body: "*"
      };
    }
  
    // 下载算法版本
    rpc DownloadAlgorithmVersion (DownloadAlgorithmVersionRequest) returns (DownloadAlgorithmVersionReply) {
        option (google.api.http) = {
            get: "/v1/algorithmmanage/algorithm/{algorithmId}/version/{version}/download"
      };
    }

    // 新增预置算法版本
    rpc AddPreAlgorithmVersion(AddPreAlgorithmVersionRequest) returns (AddPreAlgorithmVersionReply){
        option (google.api.http) = {
            post: "/v1/algorithmmanage/prealgorithm/{algorithmId}"
            body: "*"
        };
    }

    // 新增预置算法
	  rpc AddPreAlgorithm(AddAlgorithmRequest) returns (AddAlgorithmReply) {
        option (google.api.http) = {
            post: "/v1/algorithmmanage/prealgorithm"
            body: "*"
      };
    };

    // 修改预置算法
	  rpc UpdatePreAlgorithm(UpdatePreAlgorithmRequest) returns (UpdatePreAlgorithmReply) {
        option (google.api.http) = {
            put: "/v1/algorithmmanage/prealgorithm/{algorithmId}"
            body: "*"
      };
    };

    // 修改预置算法版本
	  rpc UpdatePreAlgorithmVersion(UpdatePreAlgorithmVersionRequest) returns (UpdatePreAlgorithmVersionReply) {
        option (google.api.http) = {
            put: "/v1/algorithmmanage/prealgorithm/{algorithmId}/version/{version}"
            body: "*"
      };
    };

     // 上传预置算法
	  rpc UploadPreAlgorithm(UploadPreAlgorithmRequest) returns (UploadPreAlgorithmReply) {
        option (google.api.http) = {
            post: "/v1/algorithmmanage/prealgorithm/{algorithmId}/version/{version}/upload"
            body: "*"
      };
    };

	  // 上传预置算法确认
	  rpc ConfirmUploadPreAlgorithm(ConfirmUploadPreAlgorithmRequest) returns (ConfirmUploadPreAlgorithmReply) {
        option (google.api.http) = {
            put: "/v1/algorithmmanage/prealgorithm/{algorithmId}/version/{version}/uploadconfirm"
            body: "*"
      };
    };

    // 查询算法版本详情
    rpc QueryAlgorithmVersion (QueryAlgorithmVersionRequest) returns (QueryAlgorithmVersionReply) {
        option (google.api.http) = {
            get: "/v1/algorithmmanage/algorithm/{algorithmId}/version/{version}"
      };
    }
    
}

message AlgorithmLable {
  string id = 1;
  string lableDesc = 2;
  int32 sourceType = 3;
}

message AddAlgorithmApplyRequest {
  string lableDesc = 1[(validate.rules).string = {min_len: 1, max_len: 10}];
}

message AddAlgorithmApplyReply {
  AlgorithmLable lable = 1;
}

message ListAlgorithmApplyRequest {
  int64 pageIndex = 1;
  int64 pageSize = 2[(validate.rules).int64 = {lt:100}];
}

message ListAlgorithmApplyReply {
  int64 totalSize = 1;
  repeated AlgorithmLable lables = 2;
}

message DeleteAlgorithmApplyRequest {
  string id = 1;
}

message DeleteAlgorithmApplyReply {
  int64 deletedAt = 1;
}

message UpdateAlgorithmApplyRequest {
  string id = 1;
  string lableDesc = 2;
}

message UpdateAlgorithmApplyReply {
  int64 updatedAt = 1;
}

message AddAlgorithmFrameworkRequest {
  string lableDesc = 1[(validate.rules).string = {min_len: 1, max_len: 10}];
}

message AddAlgorithmFrameworkReply {
  AlgorithmLable lable = 1;
}

message ListAlgorithmFrameworkRequest {
  int64 pageIndex = 1;
  int64 pageSize = 2[(validate.rules).int64 = {lt:100}];
}

message ListAlgorithmFrameworkReply {
  int64 totalSize = 1;
  repeated AlgorithmLable lables = 2;
}

message DeleteAlgorithmFrameworkRequest {
  string id = 1;
}

message DeleteAlgorithmFrameworkReply {
  int64 deletedAt = 1;
}

message UpdateAlgorithmFrameworkRequest {
  string id = 1;
  string lableDesc = 2;
}

message UpdateAlgorithmFrameworkReply {
  int64 updatedAt = 1;
}

message AlgorithmDetail {
  string algorithmId = 1;
  string algorithmVersion = 2;
  string spaceId = 3;
  string spaceName = 4;
  string userId = 5;
  string userName = 6;
  string algorithmName = 7;
  string modelName = 8;
  int64 fileStatus = 9;
  int64 latestCompressed = 10;
  string algorithmDescript = 11;
  string path = 12;
  bool isPrefab = 13;
  int64 createdAt = 14;
  string applyId = 15;
  string applyName = 16;
	string frameworkId = 17;
  string frameworkName = 18;
}

message MyAlgorithmDetail {
  bool isShared = 1;
  AlgorithmDetail algorithmDetail = 2;
}

message ListPreAlgorithmRequest {
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  string sortBy = 3[(validate.rules).string = {in: ["", "asc", "desc"]}];
  string orderBy = 4[(validate.rules).string = {max_len: 20}];
  string algorithmVersion = 5[(validate.rules).string = {max_len: 50}];
  string searchKey = 6[(validate.rules).string = {max_len:512}];
  int64 createdAtGte = 7;
  int64 createdAtLt = 8;
}
message ListPreAlgorithmReply {
  int64 totalSize = 1;
  repeated AlgorithmDetail algorithms = 2;
}

message ListAllAlgorithmRequest {
  int64 pageIndex = 1[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 2[(validate.rules).int64 = {gte:1,lte:100}];
  string sortBy = 3[(validate.rules).string = {in: ["", "asc", "desc"]}];
  string orderBy = 4[(validate.rules).string = {max_len: 20}];
  string algorithmVersion = 5[(validate.rules).string = {max_len: 50}];
  string searchKey = 6[(validate.rules).string = {max_len:512}];
  int64 createdAtGte = 7;
  int64 createdAtLt = 8;
}
message ListAllAlgorithmReply {
  int64 totalSize = 1;
  repeated AlgorithmDetail algorithms = 2;
}

message ListAlgorithmVersionRequest {
  string algorithmId = 1[(validate.rules).string = {min_len:32,pattern:"^[A-Za-z0-9]+$"}];
  int64 pageIndex = 2[(validate.rules).int64 = {gte:1}];
  // 页大小，最小1条，最大100条
  int64 pageSize = 3[(validate.rules).int64 = {gte:1,lte:100}];
  int64 fileStatus = 4;
}
message ListAlgorithmVersionReply {
  int64 totalSize = 1;
  repeated AlgorithmDetail algorithms = 2;
}

message DeletePreAlgorithmVersionRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}]; 
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
}
message DeletePreAlgorithmVersionReply {
  int64 deletedAt = 1;
}

message DeletePreAlgorithmRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}];
}
message DeletePreAlgorithmReply {
  int64 deletedAt = 1;
}

message AddAlgorithmRequest {
  bool isEmpty = 1;
  string algorithmName = 2[(validate.rules).string = {min_len:1,max_len:128}];
  string modelName = 3[(validate.rules).string = {min_len:1,max_len:128}];
  string algorithmDescript = 4;
  string applyId = 5;
  string frameworkId = 6;
}
message AddAlgorithmReply {
  string algorithmId = 1;
  string version = 2;
  int64 createdAt = 3;
}

message UpdatePreAlgorithmRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}];
  string algorithmDescript = 2;
  string applyId = 3;
  string frameworkId = 4;
}
message UpdatePreAlgorithmReply {
  int64 updatedAt = 1;
}

message UpdatePreAlgorithmVersionRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}];
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  string algorithmDescript = 3;
}
message UpdatePreAlgorithmVersionReply {
  int64 updatedAt = 1;
}

message UploadPreAlgorithmRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}];
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  string fileName = 3[(validate.rules).string = {min_len:3,pattern:".*\\.zip+$"}];
  string domain = 4[(validate.rules).string = {min_len: 1,pattern:"(https?)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]"}];
}
message UploadPreAlgorithmReply {
  string uploadUrl = 1;
}

message ConfirmUploadPreAlgorithmRequest {
  string algorithmId = 1;
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  string fileName = 3;
}
message ConfirmUploadPreAlgorithmReply {
  int64 updatedAt = 1;
}

message DownloadAlgorithmVersionCompressRequest {
  string algorithmId = 1; 
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
}
message DownloadAlgorithmVersionCompressReply {
  int64 compressAt = 1; 
}

message DownloadAlgorithmVersionRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}]; 
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}];
  int64  compressAt = 3[(validate.rules).int64 = {gte:1}];
  string domain = 4[(validate.rules).string = {min_len: 1,pattern:"(https?)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]"}];
}
message DownloadAlgorithmVersionReply {
  string downloadUrl = 1; 
}

message AddPreAlgorithmVersionRequest {
  string algorithmId = 1;
  string algorithmDescript = 2;
}
message AddPreAlgorithmVersionReply {
  string algorithmId = 1;
  string version = 2;
  int64 createdAt = 3;
}

message QueryAlgorithmVersionRequest {
  string algorithmId = 1[(validate.rules).string = {len:32,pattern:"^[A-Za-z0-9]+$"}];
  string version = 2[(validate.rules).string = {min_len:2,pattern:"^V[0-9]+$"}]; 
}
message QueryAlgorithmVersionReply {
  AlgorithmDetail algorithm = 1;
  repeated AlgorithmVersionAccess versionAccesses = 2; 
}
message AlgorithmVersionAccess {
  string algorithmId = 1;
  string version = 2;
  string spaceId = 3;
}